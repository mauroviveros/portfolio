---
import { useTranslations } from '@i18n';
import { Icon } from 'astro-icon/components';

const t = useTranslations(Astro.currentLocale);

interface Theme {
  _id: string;
  name: string;
  icon: string;
}

const themes: Theme[] = [
  { _id: 'dark', name: t('btn.theme_dark'), icon: 'tabler:moon-stars' },
  { _id: 'light', name: t('btn.theme_light'), icon: 'tabler:sun-high-filled' },
  { _id: 'system', name: t('btn.theme_system'), icon: 'tabler:device-desktop' },
];
---

<article class="relative w-fit" id="dropdown-theme">
  <button
    type="button"
    aria-label={t('label.dropdown.theme')}
    class="hover:bg-background-hover cursor-pointer rounded-lg p-3 transition-all duration-300 ease-in-out"
  >
    <Icon name="tabler:sun-moon" size="1.5rem" />
  </button>
  <ul
    data-active
    class="border-background-hover bg-background absolute top-full right-0 z-10 mt-1 hidden overflow-hidden rounded border data-[active=true]:block"
  >
    {
      themes.map(({ _id, name, icon }) => (
        <li class="flex">
          <button
            id={`theme-${_id}`}
            type="button"
            class="hover:bg-background-hover data-[active=true]:bg-background-active flex grow cursor-pointer items-center gap-2 p-4 font-medium"
          >
            <Icon name={icon} size="1.5rem" />
            <span>{name}</span>
          </button>
        </li>
      ))
    }
  </ul>
</article>
<script>
  const query = window.matchMedia('(prefers-color-scheme: dark)');
  const btn = document.querySelector('#dropdown-theme button');
  const ul = document.querySelector('#dropdown-theme ul');
  const lis = document.querySelectorAll('#dropdown-theme ul li button');
  const setLiActive = (theme: string | null) => {
    lis.forEach((li) => {
      const isActive = li.id.split('-')[1] === (theme || 'system');
      li.setAttribute('data-active', String(isActive));
    });
  };

  btn?.addEventListener('click', () => {
    const isActive = ul?.getAttribute('data-active') === 'true';
    ul?.setAttribute('data-active', String(!isActive));
  });

  lis.forEach((li) => {
    li.addEventListener('click', () => {
      ul?.setAttribute('data-active', 'false');
      let theme = li.id.split('-')[1];
      setLiActive(theme);

      if (theme === 'system') {
        localStorage.removeItem('theme');
        theme = query?.matches ? 'dark' : 'light';
      } else {
        localStorage.setItem('theme', theme);
      }
      document.documentElement.setAttribute('data-theme', theme);
    });
  });

  document.addEventListener('click', (e) => {
    if (!(!btn?.contains(e.target as Node) && !ul?.contains(e.target as Node))) return;
    ul?.setAttribute('data-active', 'false');
  });

  window.onload = () => {
    const theme = localStorage.getItem('theme');
    setLiActive(theme);

    query.addEventListener('change', () => {
      if (!theme || theme === 'system') {
        let theme = query?.matches ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', theme);
        setLiActive('system');
      }
    });
  };
</script>
